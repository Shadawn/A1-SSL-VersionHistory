&Вместо("ВключеноВерсионированиеОбъектов")
Функция А1БСПИсторияИзменений_ВключеноВерсионированиеОбъектов(СписокОбъектов)
	
	СоответствиеТипов = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(СписокОбъектов);
	ТипыОбъектов = Новый Массив;
	Для Каждого Элемент Из СоответствиеТипов Цикл
		ТипыОбъектов.Добавить(Элемент.Значение);
	КонецЦикла;
	
	ТекстЗапроса =
	//А1Начало - исправляем текст запроса, чтобы реализовать поддержку ИдентификаторовВерсийРасширений.
	//"ВЫБРАТЬ
	//|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК ИмяОбъекта,
	//|	ЕСТЬNULL(НастройкиВерсионированияОбъектов.Использовать, ЛОЖЬ) КАК ВключеноВерсионирование
	//|ИЗ
	//|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
	//|		ПО НастройкиВерсионированияОбъектов.ТипОбъекта = ИдентификаторыОбъектовМетаданных.Ссылка
	//|ГДЕ
	//|	ИдентификаторыОбъектовМетаданных.Ссылка В(&ТипыОбъектов)";
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК ИмяОбъекта,
	|	ЕСТЬNULL(НастройкиВерсионированияОбъектов.Использовать, ЛОЖЬ) КАК ВключеноВерсионирование
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
	|		ПО (НастройкиВерсионированияОбъектов.ТипОбъекта = ИдентификаторыОбъектовМетаданных.Ссылка)
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Ссылка В(&ТипыОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектовРасширений.ПолноеИмя,
	|	ЕСТЬNULL(НастройкиВерсионированияОбъектов.Использовать, ЛОЖЬ)
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
	|		ПО (НастройкиВерсионированияОбъектов.ТипОбъекта = ИдентификаторыОбъектовРасширений.Ссылка)
	|ГДЕ
	|	ИдентификаторыОбъектовРасширений.Ссылка В(&ТипыОбъектов)";
	//А1Конец
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	
	Результат = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ИмяОбъекта, Выборка.ВключеноВерсионирование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&Вместо("ЗаписатьДанныеТекущейВерсии")
Процедура А1БСПИсторияИзменений_ЗаписатьДанныеТекущейВерсии(Ссылка, ОбменДаннымиЗагрузка)
		УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбъектВерсионируется(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерсииОбъектов");
	ЭлементБлокировки.УстановитьЗначение("Объект", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
	
		НомерПоследнейВерсии = НомерПоследнейВерсии(Ссылка);
		
		ВерсияОбъекта = Новый ХранилищеЗначения(ДанныеДляХранения(Ссылка), Новый СжатиеДанных(9));
		
		//А1Начало
		//НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Объект.Установить(Ссылка);
		ИмяРегистра = А1БСПИсторияИзменений.ИмяРегистра(Ссылка);
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(А1БСПИсторияИзменений.ЗначениеОбъект(Ссылка, ИмяРегистра));
		//А1Конец
		НаборЗаписей.Отбор.НомерВерсии.Установить(НомерПоследнейВерсии);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.ВерсияОбъекта.Получить() = Неопределено Тогда
				Запись.ВерсияОбъекта = ВерсияОбъекта;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбменДаннымиЗагрузка Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", Ложь);
		КонецЕсли;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&Вместо("СоздатьВерсиюОбъекта")
Процедура А1БСПИсторияИзменений_СоздатьВерсиюОбъекта(Объект, СведенияОВерсииОбъекта, ЗаписьОбычнойВерсии)
	ПроверитьНаличиеПравНаИзменениеОбъекта(Объект.Метаданные());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаписьОбычнойВерсии Тогда
		ИзмененаПроведенность = Ложь;
		Если СведенияОВерсииОбъекта.Свойство("ИзмененаПроведенность") Тогда
			ИзмененаПроведенность = СведенияОВерсииОбъекта.ИзмененаПроведенность;
		КонецЕсли;
		
		// Запись данных предыдущей версии.
		Если Не Объект.ЭтоНовый() И (ИзмененаПроведенность И СведенияОВерсииОбъекта.НомерВерсии > 1 Или ВерсияОтличаетсяОтРанееЗаписанной(Объект)) Тогда
			// Если версионирование включено после создания объекта, создаем предыдущую запись о версии.
			Если СведенияОВерсииОбъекта.НомерВерсии = 1 Тогда
				Если ОбъектВерсионируется(Объект.Ссылка) Тогда
					ПараметрыВерсии = Новый Структура;
					ПараметрыВерсии.Вставить("НомерВерсии", 1);
					ПараметрыВерсии.Вставить("Комментарий", НСтр("ru = 'Версия создана по уже имеющемуся объекту'"));
					СоздатьВерсиюОбъекта(Объект.Ссылка.ПолучитьОбъект(), ПараметрыВерсии);
					СведенияОВерсииОбъекта.НомерВерсии = 2;
				КонецЕсли;
			КонецЕсли;
			
			// Сохраняем предыдущую версию объекта.
			//А1Начало - переопределяем менеджер записи
			//МенеджерЗаписи = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
			//МенеджерЗаписи.Объект = Объект.Ссылка;
			МенеджерЗаписи = А1БСПИсторияИзменений.МенеджерЗаписиПоСсылке(Объект.Ссылка);
			//А1Конец
			МенеджерЗаписи.НомерВерсии = НомерПредыдущейВерсии(Объект.Ссылка, СведенияОВерсииОбъекта.НомерВерсии);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() И Не МенеджерЗаписи.ЕстьДанныеВерсии Тогда
				МенеджерЗаписи.ВерсияОбъекта = Новый ХранилищеЗначения(ДанныеДляХранения(Объект.Ссылка), Новый СжатиеДанных(9));
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
		
		СсылкаНаОбъект = Объект.Ссылка;;
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
			Если СсылкаНаОбъект.Пустая() Тогда
				СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
				Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
			КонецЕсли;
		КонецЕсли;
		
		// Запись текущей версии без данных.
		//А1Начало - переопределяем менеджер записи
		//МенеджерЗаписи = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Объект = СсылкаНаОбъект;
		МенеджерЗаписи = А1БСПИсторияИзменений.МенеджерЗаписиПоСсылке(СсылкаНаОбъект);
		//А1Конец
		МенеджерЗаписи.НомерВерсии = СведенияОВерсииОбъекта.НомерВерсии;
		МенеджерЗаписи.ДатаВерсии = ТекущаяДатаСеанса();
		
		АвторВерсии = Неопределено;
		Если Не Объект.ДополнительныеСвойства.Свойство("АвторВерсии", АвторВерсии) Тогда
			АвторВерсии = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		МенеджерЗаписи.АвторВерсии = АвторВерсии;
		
		МенеджерЗаписи.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.ИзмененоПользователем;
		МенеджерЗаписи.Синхронизируется = Истина;
		СведенияОВерсииОбъекта.Свойство("Комментарий", МенеджерЗаписи.Комментарий);
		СведенияОВерсииОбъекта.Свойство("ПредупреждениеСинхронизации", МенеджерЗаписи.ПредупреждениеСинхронизации);
		
		Если Не Объект.ЭтоНовый() Тогда
			// Перед тем как посчитать контрольную сумму, необходимо установить проведенность в состояние,
			// которое ожидается после записи документа.
			Если ИзмененаПроведенность Тогда
				Объект.Проведен = Не Объект.Проведен;
			КонецЕсли;
			
			МенеджерЗаписи.КонтрольнаяСумма = КонтрольнаяСумма(ДанныеДляХранения(Объект));
			
			// Возвращаем проведенность в исходное состояние, чтобы не поломать другие механизмы, зависящие от этого реквизита.
			Если ИзмененаПроведенность Тогда
				Объект.Проведен = Не Объект.Проведен;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Сохраняем предыдущую версию объекта.
		//А1Начало - переопределяем менеджер записи
		//МенеджерЗаписи = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Объект = Объект.Ссылка;
		МенеджерЗаписи = А1БСПИсторияИзменений.МенеджерЗаписиПоСсылке(Объект.Ссылка);
		//А1Конец
		МенеджерЗаписи.НомерВерсии = НомерПредыдущейВерсии(Объект.Ссылка, СведенияОВерсииОбъекта.НомерВерсии);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() И Не МенеджерЗаписи.ЕстьДанныеВерсии Тогда
			МенеджерЗаписи.ВерсияОбъекта = Новый ХранилищеЗначения(ДанныеДляХранения(Объект.Ссылка), Новый СжатиеДанных(9));
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ХранилищеДанных = Новый ХранилищеЗначения(ДанныеДляХранения(Объект), Новый СжатиеДанных(9));
		//А1Начало
		//МенеджерЗаписи = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи = А1БСПИсторияИзменений.МенеджерЗаписиПоСсылке(СведенияОВерсииОбъекта.Объект);
		//А1Конец
		МенеджерЗаписи.ДатаВерсии = ТекущаяДатаСеанса();
		МенеджерЗаписи.ВерсияОбъекта = ХранилищеДанных;
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СведенияОВерсииОбъекта);
		//А1Начало
		Если ТипЗнч(МенеджерЗаписи.Объект) = Тип("Строка") Тогда
			МенеджерЗаписи.Объект = А1Э_Метаданные.ИдентификаторПоСсылке(СведенияОВерсииОбъекта.Объект); 
		КонецЕсли;
		//А1Конец
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&Вместо("НомерПоследнейВерсии")
Функция А1БСПИсторияИзменений_НомерПоследнейВерсии(Ссылка, ИзмененныеПользователем)
	Если Ссылка.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВерсииОбъектов.НомерВерсии), 0) КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект = &Ссылка
	|	И &ДополнительноеУсловие";
	
	Если ИзмененныеПользователем Тогда
		ДополнительноеУсловие = "ВерсииОбъектов.ТипВерсииОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыВерсийОбъекта.ИзмененоПользователем)";
	Иначе
		ДополнительноеУсловие = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловие", ДополнительноеУсловие);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИзмененныеПользователем", ИзмененныеПользователем);
	//А1Начало
	А1БСПИсторияИзменений.ОбработатьЗапросПоСсылке(Запрос, Ссылка);
	//А1Конец

	Если ТранзакцияАктивна() Тогда
		БлокировкаДанных = Новый БлокировкаДанных();
		//А1Начало
		//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ВерсииОбъектов");
		//ЭлементБлокировки.УстановитьЗначение("Объект", Ссылка);
		ИмяРегистра = А1БСПИсторияИзменений.ИмяРегистра(Ссылка);
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений." + ИмяРегистра);
		ЭлементБлокировки.УстановитьЗначение("Объект", А1БСПИсторияИзменений.ЗначениеОбъект(Ссылка, ИмяРегистра));
		//А1Конец
		БлокировкаДанных.Заблокировать();
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерВерсии;

КонецФункции

&Вместо("НомерПредыдущейВерсии")
Функция А1БСПИсторияИзменений_НомерПредыдущейВерсии(Ссылка, ТекущийНомерВерсии)
		Если Ссылка.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВерсииОбъектов.НомерВерсии), -1) КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект = &Ссылка
	|	И ВерсииОбъектов.ТипВерсииОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыВерсийОбъекта.ИзмененоПользователем)
	|	И ВерсииОбъектов.НомерВерсии < &ТекущийНомерВерсии";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//А1Начало
	А1БСПИсторияИзменений.ОбработатьЗапросПоСсылке(Запрос, Ссылка);
	//А1Конец
	
	Запрос.УстановитьПараметр("ТекущийНомерВерсии", ТекущийНомерВерсии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерВерсии;

КонецФункции

&Вместо("СведенияОВерсииОбъекта")
Функция А1БСПИсторияИзменений_СведенияОВерсииОбъекта(Знач Ссылка, Знач НомерВерсии)
	СообщениеНеУдалосьПолучитьВерсию = НСтр("ru = 'Не удалось получить предыдущую версию объекта.'");
	Если Не ЕстьПравоЧтенияДанныхВерсийОбъектов() Тогда
		ВызватьИсключение СообщениеНеУдалосьПолучитьВерсию;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииОбъектов.АвторВерсии КАК АвторВерсии,
	|	ВерсииОбъектов.ДатаВерсии КАК ДатаВерсии,
	|	ВерсииОбъектов.Комментарий КАК Комментарий,
	|	ВерсииОбъектов.ПредупреждениеСинхронизации КАК ПредупреждениеСинхронизации,
	|	ВерсииОбъектов.ВерсияОбъекта КАК ВерсияОбъекта,
	|	ВерсииОбъектов.КонтрольнаяСумма КАК КонтрольнаяСумма
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект = &Ссылка
	|	И ВерсииОбъектов.НомерВерсии = &НомерВерсии";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//А1Начало
	А1БСПИсторияИзменений.ОбработатьЗапросПоСсылке(Запрос, Ссылка);
	//А1Конец
	Запрос.УстановитьПараметр("НомерВерсии", Число(НомерВерсии));
	
	Результат = Новый Структура("ВерсияОбъекта, АвторВерсии, ДатаВерсии, Комментарий, ПредупреждениеСинхронизации");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Результат.ВерсияОбъекта = Результат.ВерсияОбъекта.Получить();
		Если Результат.ВерсияОбъекта = Неопределено Тогда
			Результат.ВерсияОбъекта = ДанныеВерсииОбъекта(Ссылка, НомерВерсии, Выборка.КонтрольнаяСумма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.ВерсияОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Выбранная версия объекта отсутствует в программе.'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&Вместо("ДобавитьКомментарийКВерсии")
Процедура А1БСПИсторияИзменений_ДобавитьКомментарийКВерсии(СсылкаНаОбъект, НомерВерсии, Комментарий)
	Если Не ЕстьПравоЧтенияДанныхВерсийОбъектов() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//А1Начало
	//МенеджерЗаписи = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Объект = СсылкаНаОбъект;
	МенеджерЗаписи = А1БСПИсторияИзменений.МенеджерЗаписиПоСсылке(СсылкаНаОбъект);
	//А1Конец
	МенеджерЗаписи.НомерВерсии = НомерВерсии;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Если МенеджерЗаписи.АвторВерсии = Пользователи.ТекущийПользователь() Или Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда
			МенеджерЗаписи.Комментарий = Комментарий;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&Вместо("ДанныеВерсииОбъекта")
Функция А1БСПИсторияИзменений_ДанныеВерсииОбъекта(СсылкаНаОбъект, НомерВерсии, КонтрольнаяСумма)
		Если Не ПустаяСтрока(КонтрольнаяСумма) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииОбъектов.ВерсияОбъекта,
		|	ВерсииОбъектов.НомерВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.Объект = &Объект
		|	И ВерсииОбъектов.НомерВерсии >= &НомерВерсии
		|	И ВерсииОбъектов.КонтрольнаяСумма = &КонтрольнаяСумма
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииОбъектов.НомерВерсии УБЫВ";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
		Запрос.УстановитьПараметр("КонтрольнаяСумма", КонтрольнаяСумма);
		//А1Начало
		А1БСПИсторияИзменений.ОбработатьЗапросПоСсылке(Запрос, СсылкаНаОбъект, "Объект");
		//А1Конец
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.ВерсияОбъекта.Получить();
			Если Результат = Неопределено И Выборка.НомерВерсии = НомерПоследнейВерсии(СсылкаНаОбъект, Истина) Тогда
				Результат = ДанныеДляХранения(СсылкаНаОбъект);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииОбъектов.КонтрольнаяСумма
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.Объект = &Объект
		|	И ВерсииОбъектов.НомерВерсии >= &НомерВерсии
		|	И ВерсииОбъектов.КонтрольнаяСумма <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииОбъектов.НомерВерсии";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
		//А1Начало
		А1БСПИсторияИзменений.ОбработатьЗапросПоСсылке(Запрос, СсылкаНаОбъект, "Объект");
		//А1Конец
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ДанныеВерсииОбъекта(СсылкаНаОбъект, НомерВерсии, Выборка.КонтрольнаяСумма);
		КонецЕсли;
		
		Возврат ДанныеДляХранения(СсылкаНаОбъект);
	КонецЕсли;

КонецФункции

